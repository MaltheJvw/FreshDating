// <auto-generated />
using System;
using FreshDating.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FreshDating.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FreshDating.Model.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CityId");

                    b.HasIndex("CityName")
                        .IsUnique()
                        .HasFilter("[CityName] IS NOT NULL");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Copenhagen"
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Aarhus"
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Odense"
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Aalborg"
                        });
                });

            modelBuilder.Entity("FreshDating.Model.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GenderId");

                    b.HasIndex("GenderName")
                        .IsUnique()
                        .HasFilter("[GenderName] IS NOT NULL");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderName = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            GenderName = "Other"
                        });
                });

            modelBuilder.Entity("FreshDating.Model.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<int>("Profile1Id")
                        .HasColumnType("int");

                    b.Property<int>("Profile2Id")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("Profile1Id");

                    b.HasIndex("Profile2Id");

                    b.HasIndex("UserId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FreshDating.Model.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SmokerStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("FreshDating.Model.ProfileLike", b =>
                {
                    b.Property<int>("FromProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ToProfileId")
                        .HasColumnType("int");

                    b.HasKey("FromProfileId", "ToProfileId");

                    b.HasIndex("ToProfileId");

                    b.ToTable("ProfileLikes");
                });

            modelBuilder.Entity("FreshDating.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FreshDating.Model.Match", b =>
                {
                    b.HasOne("FreshDating.Model.Profile", "Profile1")
                        .WithMany("MatchesAsProfile1")
                        .HasForeignKey("Profile1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FreshDating.Model.Profile", "Profile2")
                        .WithMany("MatchesAsProfile2")
                        .HasForeignKey("Profile2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FreshDating.Model.User", null)
                        .WithMany("Matches")
                        .HasForeignKey("UserId");

                    b.Navigation("Profile1");

                    b.Navigation("Profile2");
                });

            modelBuilder.Entity("FreshDating.Model.Profile", b =>
                {
                    b.HasOne("FreshDating.Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FreshDating.Model.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FreshDating.Model.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("FreshDating.Model.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FreshDating.Model.ProfileLike", b =>
                {
                    b.HasOne("FreshDating.Model.Profile", "FromProfile")
                        .WithMany("LikesGiven")
                        .HasForeignKey("FromProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FreshDating.Model.Profile", "ToProfile")
                        .WithMany("LikesReceived")
                        .HasForeignKey("ToProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromProfile");

                    b.Navigation("ToProfile");
                });

            modelBuilder.Entity("FreshDating.Model.Profile", b =>
                {
                    b.Navigation("LikesGiven");

                    b.Navigation("LikesReceived");

                    b.Navigation("MatchesAsProfile1");

                    b.Navigation("MatchesAsProfile2");
                });

            modelBuilder.Entity("FreshDating.Model.User", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
