@page "/register"
@using Microsoft.AspNetCore.Components.Forms
@using FreshDating.Model
@using FreshDating.Services
@inject NavigationManager NavigationManager
@inject UserService UserService


<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" />
    </div>

    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
    </div>

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
    </div>

    <div class="form-group">
        <label for="birthDate">Birth Date</label>
        <InputDate id="birthDate" class="form-control" @bind-Value="registerModel.BirthDate" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private UserModel registerModel = new UserModel();

    private async Task HandleRegister()
    {
        try
        {
            // Use UserService to register the user
            await UserService.RegisterAsync(
                registerModel.Username,
                registerModel.Password,
                registerModel.FirstName,
                registerModel.LastName,
                registerModel.Email,
                registerModel.BirthDate);

            // Navigate to home page after successful registration
            NavigationManager.NavigateTo("/");
        }
        catch (InvalidOperationException ex)
        {
            // Handle exception for duplicate username/email
            Console.WriteLine($"Registration failed: {ex.Message}");
        }
        catch (Exception ex)
        {
            // Handle other potential exceptions
            Console.WriteLine($"Error during registration: {ex.Message}");
        }
    }
}
